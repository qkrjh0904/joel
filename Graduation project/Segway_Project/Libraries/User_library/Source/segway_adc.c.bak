/* Segway_Adc 관련 c파일*/
#include "stm32f4xx.h"
#include "segway_header.h"
#include <stdio.h>
#include <math.h>

uint16_t ADC1ConvertedValue[5] = {0,0,0,0,0};	// DMA를 통해 저장되는 ADC 값
uint16_t ADC1_InitValue[5] = {0,0,0,0,0};		// ADC 초기 값

int ADC1_Volt_1[10];
int ADC1_Volt_2[10];
int ADC1_Volt_3[10];
int ADC1_Volt_4[10];
int ADC1_Volt_5[10];

int ADC1_Total_Volt_1=0;
int ADC1_Total_Volt_2=0;
int ADC1_Total_Volt_3=0;
int ADC1_Total_Volt_4=0;
int ADC1_Total_Volt_5=0;

float ADC1_Final_Volt_1=0;
float ADC1_Final_Volt_2=0;
float ADC1_Final_Volt_3=0;
float ADC1_Final_Volt_4=0;
float ADC1_Final_Volt_5=0;


int ADC_Num=0;
int ADC_Count=0; 
int DMA_Count=0;

void ADC_Config(void)
{
	DMA_InitTypeDef DMA_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;                    
	ADC_InitTypeDef ADC_InitStruct;
	ADC_CommonInitTypeDef ADC_CommonInitStruct;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Peripheral Clock Config */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);		// GPIOA AHB1 Clock Enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);		// GPIOB AHB1 Clock Enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);		// ADC1  APB2 Clock Enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);		// DMA2	 APB1 Clock Enable

	/** DMA Config **/

	/* DMA2 Stream0 Channe0 Configuration */
	DMA_InitStruct.DMA_Channel = DMA_Channel_0;							// DMA Channel 0사용
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;		// ADC1 Data Register
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&ADC1ConvertedValue;	// ADC1 Base Address
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;				// DMA 방향을 장비에서 메모리로 설정 
	DMA_InitStruct.DMA_BufferSize = 5;									// 읽어들일 갯수 
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;		// 자동으로 장비메모리 증가안함
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;				// 자동으로 메모리 증가
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	// Reads 16 bit values
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;			// Stores 16 bit values
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;						// DMA Mode Continuous
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;					// DMA 우선순위 High
	DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;					// DMA FIFO 설정안함
	DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;		// FIFO Threshold Level
	DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream0, &DMA_InitStruct);

	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);		// DMA 인터럽트 설정
	
	/* Interrupt Config */
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;			// DMA2 Sream0 인터럽트 핸들러 사용
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;	// 우선순위 0
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;			// 서브 우선순위 0
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;					// IRQHandler사용
    NVIC_Init(&NVIC_InitStructure);

	DMA_Cmd(DMA2_Stream0, ENABLE);

	/** ADC Config **/

	/* Gpio Config */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4| GPIO_Pin_5|GPIO_Pin_6 ;	// PIN3,PIN4,PIN5,PIN6 설정
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;					// Analog Input 모드 사용
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;				// PULL UP,PULL DOWN 사용안함
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					// PULL UP 사용
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;				// 스피드 50MHz
	GPIO_Init(GPIOA, &GPIO_InitStructure);  

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;						// PIN0 설정
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;					// Analog Input 모드 사용
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;				// PULL UP,PULL DOWN 사용안함
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					// PULL UP 사용
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;				// 스피드 50MHz
	GPIO_Init(GPIOB, &GPIO_InitStructure);  

	/* Adc Common Config */
	ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;			// ADC 독립모드		
	ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div4;		// ADC 2분주
	ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;		// Multi ADC DMA모드 사용안함
	ADC_CommonInitStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_10Cycles;	// Sampling Delay 5Cycle 
	ADC_CommonInit(&ADC_CommonInitStruct);

	/* Adc Config */
	ADC_DeInit();
	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;				// ADC 분해능 12Bit
	ADC_InitStruct.ADC_ScanConvMode = ENABLE;						// Scan 모트 사용
	ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;					// Continuous 모드 사용
	ADC_InitStruct.ADC_ExternalTrigConv = 0;						// 외부 Trigger Conversion 사용안함
	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;	// 외부 Trigger Conversion 사용안함
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;				// 데이터 오른쪽 정렬
	ADC_InitStruct.ADC_NbrOfConversion = 5;							// ADC 변환 갯수 
	ADC_Init(ADC1, &ADC_InitStruct);							

	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_112Cycles);		// GPIOA_Pin_3
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_112Cycles);		// GPIOA_Pin_4
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 3, ADC_SampleTime_112Cycles);		// GPIOA_Pin_5
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 4, ADC_SampleTime_112Cycles);		// GPIOA_Pin_6
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 5, ADC_SampleTime_112Cycles);		// GPIOA_Pin_8

	/* Enable DMA request after last transfer (Single-ADC mode) */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);				// 최대 ADC 변환 후 DMA 요청
	ADC_DMACmd(ADC1, ENABLE);
	ADC_Cmd(ADC1, ENABLE);

	/* Start ADC1 Software Conversion */
	ADC_SoftwareStartConv(ADC1);

}
void DMA2_Stream0_IRQHandler(void)
{
	int i=0;
  	if(DMA_GetITStatus(DMA2_Stream0,DMA_IT_TCIF0))			// DMA2 Channel0 Transfer Complete interrupt
	{
		DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
		
		ADC1_Volt_1[DMA_Count] = ADC1ConvertedValue[0];	
		ADC1_Volt_2[DMA_Count] = ADC1ConvertedValue[1];	
		ADC1_Volt_3[DMA_Count] = ADC1ConvertedValue[2];	
		ADC1_Volt_4[DMA_Count] = ADC1ConvertedValue[3];	
		ADC1_Volt_5[DMA_Count] = ADC1ConvertedValue[4];	
		
		ADC1_Total_Volt_1=0;
		ADC1_Total_Volt_2=0;
		ADC1_Total_Volt_3=0;
		ADC1_Total_Volt_4=0;
		ADC1_Total_Volt_5=0;
	
		for(i=0;i<5;i++)
		{
			ADC1_Total_Volt_1 = ADC1_Total_Volt_1 + ADC1_Volt_1[i];
			ADC1_Total_Volt_2 = ADC1_Total_Volt_2 + ADC1_Volt_2[i];
			ADC1_Total_Volt_3 = ADC1_Total_Volt_3 + ADC1_Volt_3[i];
			ADC1_Total_Volt_4 = ADC1_Total_Volt_4 + ADC1_Volt_4[i];
			ADC1_Total_Volt_5 = ADC1_Total_Volt_5 + ADC1_Volt_5[i];
		}
		
		ADC1_Final_Volt_1 = (ADC1_Total_Volt_1*0.66)/4095;  
		ADC1_Final_Volt_2 = (ADC1_Total_Volt_2*0.66)/4095;
		ADC1_Final_Volt_3 = (ADC1_Total_Volt_3*0.66)/4095;
		ADC1_Final_Volt_4 = (ADC1_Total_Volt_4*0.66)/4095;
		ADC1_Final_Volt_5 = (ADC1_Total_Volt_5*0.66)/4095;

		DMA_Count++;
		if(DMA_Count>=5) DMA_Count=0;
	}
}
